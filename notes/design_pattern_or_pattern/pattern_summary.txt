# SUMMARY - Rust 源码或标准库中常见的设计模式及其例子

## visitor
作用: 便于调用者遍历**树状数据结构**，syn/codgen/过程宏开发的越多就能越能领悟到 Visitor 模式的精髓
常用: 编译器/数据库 parser 代码的 AST 遍历
例子:
- pub trait Visitor<'ast> // rustc_ast::visit, similar to syn::visit::Visitor
- pub fn walk_expr_field // rustc_ast::visit

## fold
常用: AST 代码
例子(rustc 源码没找到 Fold 的例子):
- pub trait Fold // syn::fold::Fold

## newtype
- pub struct PackedFingerprint(Fingerprint); // rustc_data_structures::fingerprint

## ext
- pub trait PermissionsExt // library/std/src/os/unix/fs.rs

## arena
作用: 基本是存储若干指针的结构体，生命周期/内存池?，预分配内存避免内存频繁申请释放?
例子:
- `pub struct TypedArena<T>` // rustc_arena
- pub struct ResolverArenas<'a> // rustc_resolve

## builder
作用: 提高对外提供结构体构造/配置方法的易用性和可读性
常用: 数据库连接池的配置结构体
例子:
- std::thread::Builder

整理了下 Rust 源码和标准库中常见的设计模式(fold设计模式仅在syn库中找到rust源码我没找到fold用在哪)

大家有什么要补充的吗？
